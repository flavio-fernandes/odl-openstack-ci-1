#!/bin/bash

function echo-step {
    printf "\n"
    echo "-----> $1"
    printf "\n"
}

function die() {
    echo >&2 -e "\nERROR: $@\n"
    exit 1
}

function run() {
    $*
    code=$?
    [ $code -ne 0 ] && die "command [$*] failed with error code $code"
}

function cleanup {
    run sudo rm -r $DEVSTACKDIR
    #run sudo rm -r /opt/stack/tempest
    run sudo rm -rf /usr/lib/python2.7/site-packages/*client*
}

function check-env {
    echo-step "Environment Variables are..."
    run env
}

function prepare-environment {
    echo-step "Creating Devstack Directory"
    run mkdir -p $DEVSTACKDIR

    run sudo mkdir -p /opt/stack
    run sudo chown $(whoami) /opt/stack
    run sudo chmod 755 /opt/stack
}

function configure-firewall {
    echo-step "Configuring Firewall"
    cat <<EOL > $WORKSPACE/firewall.sh
sudo iptables -I INPUT -p tcp --dport 5672 -j ACCEPT
sudo iptables -I INPUT -p tcp --dport 80 -j ACCEPT
sudo iptables -I INPUT -p tcp --dport 9292 -j ACCEPT
sudo iptables -I INPUT -p tcp --dport 9696 -j ACCEPT
sudo iptables -I INPUT -p tcp --dport 35357 -j ACCEPT
sudo iptables -I INPUT -p tcp --dport 6080 -j ACCEPT
sudo iptables -I INPUT -p tcp --dport 8773 -j ACCEPT
sudo iptables -I INPUT -p udp --dport 8472 -j ACCEPT
sudo iptables -I INPUT -p udp --dport 4789 -j ACCEPT

# For the client
sudo iptables -I INPUT -p tcp --dport 5000 -j ACCEPT
sudo iptables -I INPUT -p tcp --dport 8774 -j ACCEPT

# For ODL
sudo iptables -I INPUT -p tcp --dport 8080 -j ACCEPT
EOL
    echo "Firewall Configuration is..."
    run chmod +x $WORKSPACE/firewall.sh
    run cat $WORKSPACE/firewall.sh
    run $WORKSPACE/firewall.sh
}

function install-packages {
    echo-step "Installing Prerequisite Packages"
    run sudo yum -q -y install qemu libvirt-daemon
}

function install-pip {
    echo-step "Installing python-pip"
    cd $WORKSPACE
    run curl -O https://pypi.python.org/packages/source/p/pip/pip-6.0.8.tar.gz -s
    run tar xzvf pip-6.0.8.tar.gz > /dev/null
    cd $WORKSPACE/pip-6.0.8
    run sudo -E python setup.py -q install
    echo-step "Installing testools"
    run sudo pip install -q testtools
}

function install-tempest {
    echo-step "Cloning and Installing Tempest"
    cd /opt/stack
    run git clone -q git://git.openstack.org/openstack/tempest.git
    cd /opt/stack/tempest
    run sudo python ./setup.py -q install > /dev/null
}

function install-workarounds {
    echo-step "Work arounds"
    # Workaround for bug:
    # https://bugs.launchpad.net/devstack/+bug/1276297
    run sudo rm -rf /usr/lib/python2.7/site-packages/oslo*

    # Workaround for "keystone not found" issues
    run sudo rm -rf /usr/lib/python2.7/site-packages/*client*

    # Make sure keystonemiddleware is up to date
    run sudo pip install --upgrade keystonemiddleware

    # # Workaround: Pull neutron first
    # cd /opt/stack
    # git clone -q git://git.openstack.org/openstack/neutron.git
    # cd neutron
    # run sudo python ./setup.py -q install
}

function install-devstack {
    echo-step "Cloning Devstack"
    cd $DEVSTACKDIR

    if [ "$GERRIT_PROJECT" == "openstack-dev/devstack" ]; then
        echo-step "This is a Devstack patch - cloning into $GERRIT_REFSPEC"
        run git fetch https://$GERRIT_HOST/$GERRIT_PROJECT $GERRIT_REFSPEC
        run git checkout FETCH_HEAD
    else
        run git clone -q https://github.com/openstack-dev/devstack.git
    fi

    cd $DEVSTACKDIR/devstack

    echo-step "Writing local.conf"
    ####
    # Specify changeset being worked on if it's networking-odl
    ####
    if [ "$GERRIT_PROJECT" == "stackforge/networking-odl" ]; then
        cat <<EOLLC > local.conf
[[local|localrc]]
enable_plugin networking-odl https://$GERRIT_HOST/$GERRIT_PROJECT $GERRIT_REFSPEC
EOLLC
    else
        cat <<EOLLC > local.conf
[[local|localrc]]
enable_plugin networking-odl https://github.com/stackforge/networking-odl
EOLLC
    fi

    cat <<EOLLC >> local.conf
LOGFILE=stack.sh.log
SCREEN_LOGDIR=/opt/stack/data/log
VERBOSE=True
LOG_COLOR=False
#OFFLINE=True
RECLONE=yes
GIT_TIMEOUT=0
GIT_BASE=https://git.openstack.org

IFACE_NAME=enp0s8
HOST_IP=$(ip addr | grep inet | grep enp0s8 | awk -F" " '{print $2}'| sed -e 's/\/.*$//')
HOST_NAME=$(hostname)
SERVICE_HOST=\$HOST_IP
SERVICE_HOST_NAME=\$HOST_NAME

Q_HOST=\$SERVICE_HOST
MYSQL_HOST=\$SERVICE_HOST
RABBIT_HOST=\$SERVICE_HOST
GLANCE_HOSTPORT=\$SERVICE_HOST:9292
KEYSTONE_AUTH_HOST=\$SERVICE_HOST
KEYSTONE_SERVICE_HOST=\$SERVICE_HOST

MYSQL_PASSWORD=mysql
RABBIT_PASSWORD=rabbit
QPID_PASSWORD=rabbit
SERVICE_TOKEN=service
SERVICE_PASSWORD=admin
ADMIN_PASSWORD=admin

disable_service rabbit
enable_service qpid

disable_service swift
disable_service cinder
disable_service c-sch
disable_service c-api
disable_service c-vol

enable_service n-cond
enable_service n-cpu
disable_service n-net
enable_service q-svc
# enable_service q-agt
enable_service q-dhcp
enable_service q-l3
enable_service q-meta
enable_service quantum
enable_service tempest

API_RATE_LIMIT=False

Q_PLUGIN=ml2
Q_ML2_PLUGIN_MECHANISM_DRIVERS=logger,opendaylight
ODL_MODE=allinone
ODL_NETVIRT_DEBUG_LOGS=True
ODL_MGR_IP=\$SERVICE_HOST
ODL_ARGS="-Xmx1024m -XX:MaxPermSize=512m"
ODL_BOOT_WAIT=15

ENABLE_TENANT_TUNNELS=True

EOLLC

    if [ "$ODL_URL" != "" ]; then
        cat <<EOLLC >> local.conf
ODL_URL=$ODL_URL
ODL_PKG=$ODL_PKG
ODL_NAME=$ODL_NAME
EOLLC
    fi

    if [ "$GERRIT_PROJECT" == "openstack/neutron" ]; then
        cat <<EOLLC >> local.conf
NEUTRON_REPO=https://$GERRIT_HOST/$GERRIT_PROJECT
NEUTRON_BRANCH=$GERRIT_REFSPEC
EOLLC
    fi

    echo-step "Local.conf is..."
    cat local.conf

}

function stack {
    cd $DEVSTACKDIR/devstack

    echo-step "Stacking"
    ./stack.sh > /dev/null

    if [ "$?" != "0" ]; then
        echo "stack.sh failed"
        echo "The last 20 lines of stack.sh.log were..."
        printf "\n"
        tail -n 20 $DEVSTACKDIR/devstack/stack.sh.log
        printf "\n"
        echo "Please see the Jenkins for the full logs"
        exit 1
    fi
}

function unstack {
    echo-step "Unstacking"
    ./unstack.sh > /dev/null
}

function run-tempest {
    # Run a Tempest test and log results
    echo-step "Running Tempest"
    if [[ -n ${BUILD_ID} ]]; then
        cd /opt/stack/tempest

        echo "Running tempest tests:" > $TEMPEST_RUN_LOG
        echo "" >> $TEMPEST_RUN_LOG
        testr init > /dev/null 2>&1 || true
        cmd_api="tempest.api.network.test_networks tempest.api.network.test_networks_negative tempest.api.network.test_ports tempest.api.network.test_routers"
        cmd_net_basic="tempest.scenario.test_network_basic_ops"
        cmd_net_adv="tempest.scenario.test_network_advanced_server_ops"
        cmd="testr run $cmd_api $cmd_net_basic"
        echo "opendaylight-test:$ "${cmd}  >> $TEMPEST_RUN_LOG
        ${cmd} >> $TEMPEST_RUN_LOG
        echo "" >> $TEMPEST_RUN_LOG
        echo "" >> $TEMPEST_RUN_LOG

        x=$(grep "(id=" $TEMPEST_RUN_LOG)
        y="${x//[()=]/ }"
        z=$(echo ${y} | awk '{print $3}' | sed 's/\,//g')

        #echo "x ($x) y ($y) z ($z)"

        echo "List of tempest tests ran (id="${z}"):" >> $TEMPEST_RUN_LOG
        echo "" >> $TEMPEST_RUN_LOG

        grep -ri successful:   .testrepository/${z}  |  awk '{ gsub(/\[/, "\ ");  print $1 " " $2}' >> $TEMPEST_RUN_LOG
    fi
}

function archive-logs {
    echo-step "Archiving Logs"

    mkdir -p $WORKSPACE/logs/devstack
    mkdir -p $WORKSPACE/logs/tempest
    mkdir -p $WORKSPACE/logs/opendaylight

    if [ -f /opt/stack/tempest/tempest.log ]; then
        cp -r /opt/stack/tempest/tempest.log* $WORKSPACE/logs/tempest
    fi

    if [ -d /opt/stack/data/log ]; then
        cp -a /opt/stack/data/log/* $WORKSPACE/logs/devstack
    fi

    if [ -d /opt/stack/opendaylight ]; then
        cp -r /opt/stack/opendaylight/*/logs $WORKSPACE/logs/opendaylight
        cp -r /opt/stack/opendaylight/*/data/log $WORKSPACE/logs/opendaylight
    fi

    if [ -f $TEMPEST_RUN_LOG ]; then
        cp -r $TEMPEST_RUN_LOG $WORKSPACE/logs
        cp -r $TEMPEST_RUN_LOG $WORKSPACE
    fi

    if [ -f $DEVSTACKDIR/devstack/stack.sh.log ]; then
        cp -r $DEVSTACKDIR/devstack/stack.sh.log* $WORKSPACE/logs
    fi

    if [ -f $DEVSTACKDIR/devstack/local.conf ]; then
        cp -r $DEVSTACKDIR/devstack/local.conf $WORKSPACE/logs
    fi

    tar cvzf $WORKSPACE/opendaylight-full-logs.tgz $WORKSPACE/logs

    cleanup

}

function test-branch {
    echo-step "Looking to install custom Neutron repository"
    if [ "$GERRIT_PROJECT" != "" ]; then
      export GERRIT_HOST=review.openstack.org
      export GERRIT_PROJECT=openstack/neutron

      # Read in NEUTRON_BRANCH if it's not set
      if [ "$GERRIT_REFSPEC" == "" ]; then
          echo "Please enter the branch you want to test: "
          read GERRIT_REFSPEC
      fi

      echo "Variables set:"
      echo "GERRIT_PROJECT: $GERRIT_PROJECT"
      echo "GERRIT_HOST: $GERRIT_HOST"
      echo "GERRIT_PROJECT: $GERRIT_PROJECT"
      echo "GERRIT_REFSPEC: $GERRIT_REFSPEC"
    else
      echo "Not testing specific branch, working with origin/master."
    fi
}
